{"import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setStudentInput } from "../Store/authslice";

const TestComp = ({ testId }) => {
  useEffect(() => {
    const handleBeforeUnload = (event) => {
      event.preventDefault();
      event.returnValue = "Are you sure you want to leave? Changes may not be saved.";
    };

    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
    };
  }, []);

  const dispatch = useDispatch();

  // Redux State
  const studentInput = useSelector((state) => state.auth.studentInput);

  // Local State
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOptions, setSelectedOptions] = useState([]); // For MCQ and INT
  const [selectedOption, setSelectedOption] = useState(null); // For SCQ
  const [inputAnswer, setInputAnswer] = useState(""); // For INT
  const [timer, setTimer] = useState(0);
  const [intervalId, setIntervalId] = useState(null);
  const [remainingTime, setRemainingTime] = useState(0);
  const [testActive, setTestActive] = useState(false);

  const question = questions[currentQuestionIndex];

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await fetch("/testData/test1.txt");
        const data = await response.json();
        const selectedTest = data.find((test) => test.id === testId);

        if (selectedTest) {
          const { test_question, test_date_and_time, duration } = selectedTest;
          const mappedQuestions = test_question.map(([id, subject, text, ...rest]) => {
            const type = rest.pop(); // Extract question type (SCQ, MCQ, INT)
            const options = type === "SCQ" || type === "MCQ" ? rest : [];
            return { id, subject, text, type, options };
          });

          setQuestions(mappedQuestions);
          setRemainingTime(duration * 60);
          setTestActive(true);
          console.log(test_date_and_time);
        } else {
          console.log(`Test with ID ${testId} not found.`);
        }
      } catch (error) {
        console.error("Error fetching questions:", error);
      }
    };

    fetchQuestions();
  }, [testId]);

  useEffect(() => {
    if (remainingTime <= 0 && testActive) {
      setTestActive(false);
      clearInterval(intervalId);
      alert("Time is up! The test has ended.");
      return;
    }

    const countdownInterval = setInterval(() => {
      setRemainingTime((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(countdownInterval);
  }, [remainingTime]);

  useEffect(() => {
    if (intervalId) {
      clearInterval(intervalId);
    }

    const previousResponse = studentInput.find(
      (input) => input.questionId === question?.id
    );

    setSelectedOption(previousResponse?.selectedOption || null);
    setSelectedOptions(previousResponse?.selectedOptions || []);
    setInputAnswer(previousResponse?.inputAnswer || "");
    setTimer(previousResponse?.time || 0);

    const newIntervalId = setInterval(() => {
      setTimer((prev) => prev + 1);
    }, 1000);

    setIntervalId(newIntervalId);

    return () => {
      clearInterval(newIntervalId);
    };
  }, [currentQuestionIndex, studentInput, question?.id]);

  const saveResponse = (status) => {
    if (!testActive) return;

    const response = {
      questionId: question.id,
      subject: question.subject,
      type: question.type,
      selectedOption: question.type === "SCQ" ? selectedOption : null,
      selectedOptions: question.type === "MCQ" ? selectedOptions : [],
      inputAnswer: question.type === "INT" ? inputAnswer : "",
      status,
      time: timer,
    };

    const updatedStudentInput = [...studentInput];
    const existingResponseIndex = updatedStudentInput.findIndex(
      (input) => input.questionId === question.id
    );

    if (existingResponseIndex !== -1) {
      updatedStudentInput[existingResponseIndex] = response;
    } else {
      updatedStudentInput.push(response);
    }

    dispatch(setStudentInput(updatedStudentInput));
  };

  const handleSaveAndNext = () => {
  if (
    question.type === "SCQ" && !selectedOption ||
    question.type === "MCQ" && selectedOptions.length === 0 ||
    question.type === "INT" && inputAnswer.trim() === ""
  ) {
    alert("Please choose an option or provide an answer.");
    return;
  }
  saveResponse(1);
  setCurrentQuestionIndex((prev) => (prev === questions.length - 1 ? 0 : prev + 1));
};

  const handleSaveAndMarkForReview = () => {
  if (
    question.type === "SCQ" && !selectedOption ||
    question.type === "MCQ" && selectedOptions.length === 0 ||
    question.type === "INT" && inputAnswer.trim() === ""
  ) {
    alert("Please choose an option or provide an answer.");
    return;
  }
    saveResponse(2);
    setCurrentQuestionIndex((prev) => (prev === questions.length - 1 ? 0 : prev + 1));
  };

  const handleMarkForReviewAndNext = () => {
    saveResponse(3);
    setCurrentQuestionIndex((prev) => (prev === questions.length - 1 ? 0 : prev + 1));
  };

  const handleNext = () => {
    const existingResponse = studentInput.find(
      (input) => input.questionId === question.id
    );

    if (!existingResponse ||  existingResponse.status == 0) {
      // Save as not answered (status 0)
      saveResponse(0);
    } else if (existingResponse && selectedOption && existingResponse.status == 1||2||3) {
      // Do not save
      setCurrentQuestionIndex((prev) => (prev === questions.length - 1 ? 0 : prev + 1));
      return;
    } else if (existingResponse.status != 0) {
      // Save as not answered (status 0)
      saveResponse(existingResponse.status);
    }
    setCurrentQuestionIndex((prev) => (prev === questions.length - 1 ? 0 : prev + 1));
  };
  const handleBack = () => {
    const existingResponse = studentInput.find(
      (input) => input.questionId === question.id
    );

    if (!existingResponse || !selectedOption || existingResponse.status == 0) {
      // Save as not answered (status 0)
      saveResponse(0);
    } else if (existingResponse && selectedOption && existingResponse.status == 1) {
      // Do not save
      setCurrentQuestionIndex((prev) => (prev === 0 ? questions.length - 1 : prev - 1));
      return;
    } else if (existingResponse.status != 0) {
      // Save as not answered (status 0)
      saveResponse(existingResponse.status);
    }
    setCurrentQuestionIndex((prev) => (prev === 0 ? questions.length - 1 : prev - 1));
  };

  const handleClear = () => {
    setSelectedOption(null);
    setSelectedOptions([]);
    setInputAnswer("");
    const updatedStudentInput = studentInput.filter(
      (input) => input.questionId !== question.id
    );
    dispatch(setStudentInput(updatedStudentInput));
  };

  const handleQuestionNavigation = (index) => {
    saveResponse(0);
    setCurrentQuestionIndex(index);
  };

  const countStatus = () => {
    const counts = {
      notVisited: questions.length,
      notAnswered: 0,
      answered: 0,
      markedForReview: 0,
      answeredAndMarkedForReview: 0,
    };

    studentInput.forEach((input) => {
      counts.notVisited--;
      if (input.status === 0) {
        counts.notAnswered++;
      } else if (input.status === 2) {
        counts.markedForReview++;
      } else if (input.status === 3) {
        counts.answeredAndMarkedForReview++;
      } else if (input.status === 1) {
        counts.answered++;
      }
    });

    return counts;
  };

  const statusCounts = countStatus();

  const getButtonColor = (index) => {
    const response = studentInput.find((input) => input.questionId === questions[index].id);
    if (!response) return "bg-gray-200";
    if (response.status === 0) return "bg-red-400";
    if (response.selectedOption || response.selectedOptions.length || response.inputAnswer) {
      if (response.status === 1) return "bg-green-400";
      if (response.status === 2) return "bg-purple-400";
    }
    if (response.status === 3) return "bg-yellow-400";
    return "bg-gray-200";
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <div className="flex flex-col">
      <div className="text-center py-2 bg-gray-100 text-lg font-bold">
        Remaining Time: {formatTime(remainingTime)}
      </div>

      <div className="flex">
        <div className="flex-1 p-6 font-sans">
          <h2 className="text-2xl font-bold">Question {currentQuestionIndex + 1}</h2>
          <p className="text-lg font-semibold">
            <span className="text-gray-600">Subject:</span> {question?.subject}
          </p>
          <p className="mt-2 text-lg">{question?.text}</p>
          <p className="mt-2 text-sm text-gray-500">Time Spent: {timer} seconds</p>

          <div className="mt-4 space-y-2">
            {question?.type === "SCQ" &&
              question.options.map((option, index) => (
                <label key={index} className="flex items-center">
                  <input
                    type="radio"
                    className="mr-2 w-4 h-4"
                    name="option"
                    value={option}
                    checked={selectedOption === option}
                    onChange={() => setSelectedOption(option)}
                    disabled={!testActive}
                  />
                  <span className="text-md">{option}</span>
                </label>
              ))}

            {question?.type === "MCQ" &&
              question.options.map((option, index) => (
                <label key={index} className="flex items-center">
                  <input
                    type="checkbox"
                    className="mr-2 w-4 h-4"
                    value={option}
                    checked={selectedOptions.includes(option)}
                    onChange={() => {
                      setSelectedOptions((prev) =>
                        prev.includes(option)
                          ? prev.filter((opt) => opt !== option)
                          : [...prev, option]
                      );
                    }}
                    disabled={!testActive}
                  />
                  <span className="text-md">{option}</span>
                </label>
              ))}

            {question?.type === "INT" && (
              <input
                type="text"
                className="mt-2 border border-gray-300 rounded w-full p-2"
                placeholder="Enter your answer"
                value={inputAnswer}
                onChange={(e) => setInputAnswer(e.target.value)}
                disabled={!testActive}
              />
            )}
          </div>

          <div className="mt-4 flex space-x-2">
            <button
              className="px-4 py-2 bg-blue-500 text-white rounded"
              onClick={handleSaveAndNext}
              disabled={!testActive}
            >
              Save & Next
            </button>
            <button
              className="px-4 py-2 bg-yellow-500 text-white rounded"
              onClick={handleSaveAndMarkForReview}
              disabled={!testActive}
            >
              Save & Mark for Review
            </button>
            <button
              className="px-4 py-2 bg-purple-500 text-white rounded"
              onClick={handleMarkForReviewAndNext}
              disabled={!testActive}
            >
              Mark for Review & Next
            </button>
            <button
              className="px-4 py-2 bg-gray-500 text-white rounded"
              onClick={handleClear}
              disabled={!testActive}
            >
              Clear
            </button>
          </div>

          <div className="mt-4 flex space-x-2">
            <button
              className="px-4 py-2 bg-green-500 text-white rounded"
              onClick={handleNext}
              disabled={!testActive}
            >
              Next
            </button>
            <button
              className="px-4 py-2 bg-red-500 text-white rounded"
              onClick={handleBack}
              disabled={!testActive}
            >
              Back
            </button>
          </div>
        </div>

        <div className="w-1/4 p-6 bg-gray-200">
          <h3 className="text-lg font-bold">Question Navigation</h3>
          <div className="mt-4 grid grid-cols-5 gap-2">
            {questions.map((_, index) => (
              <button
                key={index}
                className={`px-2 py-1 text-white rounded ${getButtonColor(index)}`}
                onClick={() => handleQuestionNavigation(index)}
                disabled={!testActive}
              >
                {index + 1}
              </button>
            ))}
          </div>

          <div className="mt-4">
            <h3 className="text-md font-bold">Status</h3>
            <p>Not Visited: {statusCounts.notVisited}</p>
            <p>Not Answered: {statusCounts.notAnswered}</p>
            <p>Answered: {statusCounts.answered}</p>
            <p>Marked for Review: {statusCounts.markedForReview}</p>
            <p>Answered & Marked for Review: {statusCounts.answeredAndMarkedForReview}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestComp;
"}